{"version":3,"sources":["webpack:///webpack/bootstrap c661d1f555f8c09db1d9","webpack:///./app/contentScript/index.js","webpack:///./app/lib/communication/index.js"],"names":["port","chrome","runtime","connect","name","onMessage","addListener","console","log","message","postMessage","window","addEventListener","detail","dispatchEvent","CustomEvent","document","node","getElementsByTagName","script","createElement","setAttribute","extension","getURL","appendChild","CommunicationChannel","PORT","Symbol","EVENT_LISTENER","Communication","communicationChannel","channelKey","Object","values","includes","_channel","_channelKey","_registerListeners","_registerPortListeners","_registerEventListeners","event","channel","action","data","_sendPort","_sendEventListener"],"mappings":"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","file":"contentScript.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap c661d1f555f8c09db1d9","import Communication, { CommunicationChannel } from 'lib/communication/index.js';\n\nconst port = chrome.runtime.connect({ name: 'tronContentScript' });\n\nport.onMessage.addListener(message => {\n    console.log('contentScript received message', message);\n});\n\nconsole.log('contentScript sending message ping');\nport.postMessage('ping');\n\n// Listen to messages from pageHook.js\nwindow.addEventListener('tronContentScript', ({ detail: message }) => {\n    // We should add a target param to the message\n    // so we know when to forward to backgroundScript.js\n\n    // forward with port.postMessage('ping')\n    // reply with window.dispatchEvent (we should make \n    // this a wrapper that calls back with a reply method)\n\n    console.log('contentScript receive message (from pageHook):', message);\n    window.dispatchEvent(new CustomEvent('tronPageHook', { detail: 'Returning message ' + message }));\n});\n\n// Inject pageHook.js into page\ndocument.addEventListener('DOMContentLoaded', event => {\n    console.log('DOM loaded, injecting pageHook.js');\n\n    const node = document.getElementsByTagName('body')[0];\n    const script = document.createElement('script');\n\n    script.setAttribute('type', 'text/javascript');\n    script.setAttribute('src', chrome.extension.getURL('dist/pageHook.js'));\n\n    node.appendChild(script);\n});\n\n// To wait for dom element to be created:\n// https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\n\n\n// WEBPACK FOOTER //\n// ./app/contentScript/index.js","export const CommunicationChannel = {\n    PORT: Symbol('PORT'),\n    EVENT_LISTENER: Symbol('EVENT_LISTENER')\n}\n\nexport default class Communication {\n    constructor(communicationChannel = false, channelKey = false) {\n        if(!communicationChannel)\n            throw 'No communication channel provided';\n\n        if(!Object.values(CommunicationChannel).includes(communicationChannel))\n            throw 'Invalid communication channel provided';\n\n        this._channel = communicationChannel;\n        this._channelKey = channelKey;\n\n        this._registerListeners();\n    }\n\n    _registerListeners() {\n        if(this._channel == CommunicationChannel.PORT)\n            this._registerPortListeners();\n\n        if(this._channel == CommunicationChannel.EVENT_LISTENER)\n            this._registerEventListeners();\n    }\n\n    _registerEventListeners() {\n        window.addEventListener(this._channelKey, ({ detail: event }) => {\n            // this.emit(event.action, event.data);\n\n            // We should add a target param to the message\n            // so we know when to forward to backgroundScript.js\n        \n            // forward with port.postMessage('ping')\n            // reply with window.dispatchEvent (we should make \n            // this a wrapper that calls back with a reply method)\n        \n            console.log('contentScript receive message (from pageHook):', message);\n            window.dispatchEvent(new CustomEvent('tronPageHook', { detail: 'Returning message ' + message }));\n        });\n    }\n\n    _sentEventListener(channel, action, data) {\n        window.dispatchEvent(\n            new CustomEvent(\n                channel,\n                {\n                    detail: {\n                        action,\n                        data\n                    }\n                }\n            )\n        );\n    }\n\n    send(action, data = {}, channel = false) {\n        if(this._channel == CommunicationChannel.PORT)\n            this._sendPort(action, data)\n\n        if(this._channel == CommunicationChannel.EVENT_LISTENER)\n            this._sendEventListener(channel, action, data);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./app/lib/communication/index.js"],"sourceRoot":""}